name: Build and Release DLLs

on:
    push:
        branches: [main, master]
        paths:
            - 'crates/**'
            - 'Cargo.*'
            - 'rust-toolchain.toml'
            - 'Dockerfile'
    pull_request:
        branches: [main, master]
        paths:
            - 'crates/**'
            - 'Cargo.*'
            - 'rust-toolchain.toml'
            - 'Dockerfile'

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    build:
        runs-on: ubuntu-20.04 # Use older Ubuntu for older GLIBC
        permissions:
            contents: write
            packages: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image with artifacts
              run: |
                  # Build using Ubuntu 18.04 base for GLIBC 2.27 compatibility
                  docker build --target artifacts -t build-artifacts \
                    --build-arg BASE_IMAGE=ubuntu:18.04 .

            - name: Extract DLL files from Docker image
              run: |
                  # Create output directory
                  mkdir -p release

                  # Create a temporary container and copy files
                  container_id=$(docker create build-artifacts)
                  docker cp $container_id:/out/. ./release/
                  docker rm $container_id

                  # List extracted files with detailed info
                  echo "Extracted files:"
                  ls -la release/

                  # Check static linking for Linux binaries
                  echo ""
                  echo "Static linking verification:"
                  for dll in release/*linux*.dll; do
                    if [ -f "$dll" ]; then
                      echo "=== $dll ==="
                      echo "File info:"
                      file "$dll"
                      echo "Dependencies (should show 'not a dynamic executable' for static):"
                      ldd "$dll" 2>&1 || echo "✅ Statically linked (no dynamic dependencies)"
                      echo ""
                    fi
                  done

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: gmod-integration-dlls
                  path: release/
                  retention-days: 30

            - name: Generate release tag
              id: tag
              run: |
                  # Generate timestamp-based tag
                  timestamp=$(date +"%Y%m%d-%H%M%S")
                  commit_short=$(echo ${{ github.sha }} | cut -c1-7)
                  tag="v${timestamp}-${commit_short}"
                  echo "tag=${tag}" >> $GITHUB_OUTPUT
                  echo "Generated tag: ${tag}"

            - name: Create Release
              if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.tag.outputs.tag }}
                  name: 'Gmod Integration ${{ steps.tag.outputs.tag }}'
                  body: |
                      ## Auto-generated release

                      **Commit:** ${{ github.sha }}
                      **Branch:** ${{ github.ref_name }}
                      **Timestamp:** ${{ steps.tag.outputs.tag }}

                      ### Compatibility Notes:
                      - **Linux binaries are statically linked** - no external dependencies required
                      - **Windows binaries are statically linked** - no Visual C++ Runtime needed
                      - Compatible with any Linux distribution (using musl static linking)
                      - Compatible with Windows 7+ (32-bit and 64-bit)

                      ### Included DLLs:
                      - `gmsv_gmod_integration_linux.dll` - Linux 32-bit (statically linked)
                      - `gmsv_gmod_integration_linux64.dll` - Linux 64-bit (statically linked)
                      - `gmsv_gmod_integration_win32.dll` - Windows 32-bit (statically linked)
                      - `gmsv_gmod_integration_win64.dll` - Windows 64-bit (statically linked)
                      - `gmsv_gmod_integration_loader_linux.dll` - Linux 32-bit Loader (statically linked)
                      - `gmsv_gmod_integration_loader_linux64.dll` - Linux 64-bit Loader (statically linked)
                      - `gmsv_gmod_integration_loader_win32.dll` - Windows 32-bit Loader (statically linked)
                      - `gmsv_gmod_integration_loader_win64.dll` - Windows 64-bit Loader (statically linked)

                      ### Installation:
                      Download the appropriate DLL files for your platform and place them in `garrysmod/lua/bin/`

                      ### Benefits of Static Linking:
                      - ✅ No GLIBC version compatibility issues
                      - ✅ No missing system libraries
                      - ✅ Works on any Linux distribution
                      - ✅ Self-contained binaries
                  files: release/*.dll
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Summary
              run: |
                  echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
                  echo "✅ Successfully built all DLL files with static linking" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### Key Features:" >> $GITHUB_STEP_SUMMARY
                  echo "- 🔗 **Static linking** - no external dependencies" >> $GITHUB_STEP_SUMMARY
                  echo "- 🐧 **Universal Linux compatibility** - works on any distribution" >> $GITHUB_STEP_SUMMARY
                  echo "- 🪟 **Windows compatibility** - no runtime requirements" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### Generated Files:" >> $GITHUB_STEP_SUMMARY
                  for dll in release/*.dll; do
                    if [ -f "$dll" ]; then
                      filename=$(basename "$dll")
                      size=$(ls -lh "$dll" | awk '{print $5}')
                      echo "- \`$filename\` ($size)" >> $GITHUB_STEP_SUMMARY
                    fi
                  done

                  if [ "${{ github.event_name }}" == "push" ] && ([ "${{ github.ref }}" == "refs/heads/main" ] || [ "${{ github.ref }}" == "refs/heads/master" ]); then
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "🚀 **Release created:** ${{ steps.tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
                  fi
